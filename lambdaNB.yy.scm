(require-extension lalr-driver)
(define lambdaNB-parser
  (lr-driver
    '#(((*default* *error*)
        (ID 6)
        (LAMBDA 5)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 1))
       ((*default* *error*)
        (ID 6)
        (LAMBDA 5)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 1))
       ((*default* -12))
       ((*default* -10))
       ((*default* -11))
       ((*default* *error*) (ID 6))
       ((*default* -6))
       ((*default* -3))
       ((*default* -2))
       ((*default* -9))
       ((*default* *error*)
        (*eoi* 15)
        (ID 6)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 14))
       ((*default* *error*)
        (ID 6)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 14)
        (RPAREN 18))
       ((*default* *error*) (DOT 19))
       ((*default* -7) (ID 6))
       ((*default* *error*)
        (ID 6)
        (LAMBDA 5)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 1))
       ((*default* -1) (*eoi* accept))
       ((*default* -5))
       ((*default* -14))
       ((*default* -4))
       ((*default* *error*)
        (ID 6)
        (LAMBDA 5)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 1))
       ((*default* -8))
       ((*default* *error*)
        (ID 6)
        (BOOL 4)
        (NUM 3)
        (BUILTIN 2)
        (LPAREN 14)
        (RPAREN 23))
       ((*default* -13) (ID 6) (BOOL 4) (NUM 3) (BUILTIN 2) (LPAREN 14))
       ((*default* -15)))
    (vector
      '((5 . 7) (4 . 8) (2 . 9) (1 . 10))
      '((5 . 7) (4 . 8) (2 . 9) (1 . 11))
      '()
      '()
      '()
      '((3 . 12) (2 . 13))
      '()
      '()
      '()
      '()
      '((6 . 16) (4 . 17) (2 . 9))
      '((6 . 16) (4 . 17) (2 . 9))
      '()
      '((3 . 20) (2 . 13))
      '((5 . 7) (4 . 8) (2 . 9) (1 . 21))
      '()
      '()
      '()
      '()
      '((5 . 7) (4 . 8) (2 . 9) (1 . 22))
      '()
      '((6 . 16) (4 . 17) (2 . 9))
      '((6 . 16) (4 . 17) (2 . 9))
      '())
    (vector
      '()
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          $1))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 1 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 1 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 1 $2)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 1 (make-app $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 2 (make-var $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 3 (cons $1 '()))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($2 (vector-ref ___stack (- ___sp 1)))
               ($1 (vector-ref ___stack (- ___sp 3))))
          (___push 2 3 (cons $1 $2))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 4 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 4 (make-num $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 4 (make-bool $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1))))
          (___push 1 4 (make-builtin $1))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($4 (vector-ref ___stack (- ___sp 1)))
               ($3 (vector-ref ___stack (- ___sp 3)))
               ($2 (vector-ref ___stack (- ___sp 5)))
               ($1 (vector-ref ___stack (- ___sp 7))))
          (___push 4 5 (make-fun $2 $4))))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($1 (vector-ref ___stack (- ___sp 1)))) (___push 1 6 $1)))
      (lambda (___stack ___sp ___goto-table ___push yypushback)
        (let* (($3 (vector-ref ___stack (- ___sp 1)))
               ($2 (vector-ref ___stack (- ___sp 3)))
               ($1 (vector-ref ___stack (- ___sp 5))))
          (___push 3 6 $2))))))

